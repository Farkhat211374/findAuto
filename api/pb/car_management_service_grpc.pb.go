// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.1
// source: car_management_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CarManagementServiceClient is the client API for CarManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CarManagementServiceClient interface {
	CreateCar(ctx context.Context, in *CreateCarRequest, opts ...grpc.CallOption) (*CreateCarResponse, error)
	UploadImage(ctx context.Context, opts ...grpc.CallOption) (CarManagementService_UploadImageClient, error)
}

type carManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCarManagementServiceClient(cc grpc.ClientConnInterface) CarManagementServiceClient {
	return &carManagementServiceClient{cc}
}

func (c *carManagementServiceClient) CreateCar(ctx context.Context, in *CreateCarRequest, opts ...grpc.CallOption) (*CreateCarResponse, error) {
	out := new(CreateCarResponse)
	err := c.cc.Invoke(ctx, "/pb.CarManagementService/CreateCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carManagementServiceClient) UploadImage(ctx context.Context, opts ...grpc.CallOption) (CarManagementService_UploadImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &CarManagementService_ServiceDesc.Streams[0], "/pb.CarManagementService/UploadImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &carManagementServiceUploadImageClient{stream}
	return x, nil
}

type CarManagementService_UploadImageClient interface {
	Send(*UploadImageRequest) error
	CloseAndRecv() (*UploadImageResponse, error)
	grpc.ClientStream
}

type carManagementServiceUploadImageClient struct {
	grpc.ClientStream
}

func (x *carManagementServiceUploadImageClient) Send(m *UploadImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *carManagementServiceUploadImageClient) CloseAndRecv() (*UploadImageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CarManagementServiceServer is the server API for CarManagementService service.
// All implementations must embed UnimplementedCarManagementServiceServer
// for forward compatibility
type CarManagementServiceServer interface {
	CreateCar(context.Context, *CreateCarRequest) (*CreateCarResponse, error)
	UploadImage(CarManagementService_UploadImageServer) error
	mustEmbedUnimplementedCarManagementServiceServer()
}

// UnimplementedCarManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCarManagementServiceServer struct {
}

func (UnimplementedCarManagementServiceServer) CreateCar(context.Context, *CreateCarRequest) (*CreateCarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCar not implemented")
}
func (UnimplementedCarManagementServiceServer) UploadImage(CarManagementService_UploadImageServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedCarManagementServiceServer) mustEmbedUnimplementedCarManagementServiceServer() {}

// UnsafeCarManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CarManagementServiceServer will
// result in compilation errors.
type UnsafeCarManagementServiceServer interface {
	mustEmbedUnimplementedCarManagementServiceServer()
}

func RegisterCarManagementServiceServer(s grpc.ServiceRegistrar, srv CarManagementServiceServer) {
	s.RegisterService(&CarManagementService_ServiceDesc, srv)
}

func _CarManagementService_CreateCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarManagementServiceServer).CreateCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CarManagementService/CreateCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarManagementServiceServer).CreateCar(ctx, req.(*CreateCarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarManagementService_UploadImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CarManagementServiceServer).UploadImage(&carManagementServiceUploadImageServer{stream})
}

type CarManagementService_UploadImageServer interface {
	SendAndClose(*UploadImageResponse) error
	Recv() (*UploadImageRequest, error)
	grpc.ServerStream
}

type carManagementServiceUploadImageServer struct {
	grpc.ServerStream
}

func (x *carManagementServiceUploadImageServer) SendAndClose(m *UploadImageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *carManagementServiceUploadImageServer) Recv() (*UploadImageRequest, error) {
	m := new(UploadImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CarManagementService_ServiceDesc is the grpc.ServiceDesc for CarManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CarManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CarManagementService",
	HandlerType: (*CarManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCar",
			Handler:    _CarManagementService_CreateCar_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadImage",
			Handler:       _CarManagementService_UploadImage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "car_management_service.proto",
}
