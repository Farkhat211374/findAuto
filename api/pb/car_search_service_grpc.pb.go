// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.1
// source: car_search_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CarSearchServiceClient is the client API for CarSearchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CarSearchServiceClient interface {
	SearchCar(ctx context.Context, in *SearchCarRequest, opts ...grpc.CallOption) (CarSearchService_SearchCarClient, error)
}

type carSearchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCarSearchServiceClient(cc grpc.ClientConnInterface) CarSearchServiceClient {
	return &carSearchServiceClient{cc}
}

func (c *carSearchServiceClient) SearchCar(ctx context.Context, in *SearchCarRequest, opts ...grpc.CallOption) (CarSearchService_SearchCarClient, error) {
	stream, err := c.cc.NewStream(ctx, &CarSearchService_ServiceDesc.Streams[0], "/pb.CarSearchService/SearchCar", opts...)
	if err != nil {
		return nil, err
	}
	x := &carSearchServiceSearchCarClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CarSearchService_SearchCarClient interface {
	Recv() (*SearchCarResponse, error)
	grpc.ClientStream
}

type carSearchServiceSearchCarClient struct {
	grpc.ClientStream
}

func (x *carSearchServiceSearchCarClient) Recv() (*SearchCarResponse, error) {
	m := new(SearchCarResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CarSearchServiceServer is the server API for CarSearchService service.
// All implementations must embed UnimplementedCarSearchServiceServer
// for forward compatibility
type CarSearchServiceServer interface {
	SearchCar(*SearchCarRequest, CarSearchService_SearchCarServer) error
	mustEmbedUnimplementedCarSearchServiceServer()
}

// UnimplementedCarSearchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCarSearchServiceServer struct {
}

func (UnimplementedCarSearchServiceServer) SearchCar(*SearchCarRequest, CarSearchService_SearchCarServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchCar not implemented")
}
func (UnimplementedCarSearchServiceServer) mustEmbedUnimplementedCarSearchServiceServer() {}

// UnsafeCarSearchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CarSearchServiceServer will
// result in compilation errors.
type UnsafeCarSearchServiceServer interface {
	mustEmbedUnimplementedCarSearchServiceServer()
}

func RegisterCarSearchServiceServer(s grpc.ServiceRegistrar, srv CarSearchServiceServer) {
	s.RegisterService(&CarSearchService_ServiceDesc, srv)
}

func _CarSearchService_SearchCar_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchCarRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CarSearchServiceServer).SearchCar(m, &carSearchServiceSearchCarServer{stream})
}

type CarSearchService_SearchCarServer interface {
	Send(*SearchCarResponse) error
	grpc.ServerStream
}

type carSearchServiceSearchCarServer struct {
	grpc.ServerStream
}

func (x *carSearchServiceSearchCarServer) Send(m *SearchCarResponse) error {
	return x.ServerStream.SendMsg(m)
}

// CarSearchService_ServiceDesc is the grpc.ServiceDesc for CarSearchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CarSearchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CarSearchService",
	HandlerType: (*CarSearchServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchCar",
			Handler:       _CarSearchService_SearchCar_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "car_search_service.proto",
}
